// Code generated by MockGen. DO NOT EDIT.
// Source: sound/base.go

// Package mock_sound is a generated GoMock package.
package mock_sound

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sound "github.com/jasoncorbett/push-sounds/sound"
)

// MockSound is a mock of Sound interface.
type MockSound struct {
	ctrl     *gomock.Controller
	recorder *MockSoundMockRecorder
}

// MockSoundMockRecorder is the mock recorder for MockSound.
type MockSoundMockRecorder struct {
	mock *MockSound
}

// NewMockSound creates a new mock instance.
func NewMockSound(ctrl *gomock.Controller) *MockSound {
	mock := &MockSound{ctrl: ctrl}
	mock.recorder = &MockSoundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSound) EXPECT() *MockSoundMockRecorder {
	return m.recorder
}

// Location mocks base method.
func (m *MockSound) Location() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(string)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockSoundMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockSound)(nil).Location))
}

// Play mocks base method.
func (m *MockSound) Play() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Play")
	ret0, _ := ret[0].(error)
	return ret0
}

// Play indicates an expected call of Play.
func (mr *MockSoundMockRecorder) Play() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Play", reflect.TypeOf((*MockSound)(nil).Play))
}

// Type mocks base method.
func (m *MockSound) Type() sound.AudioFileType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(sound.AudioFileType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockSoundMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSound)(nil).Type))
}
